server:
  port: 81012

spring:
  application:
    name: beter-spring-cloud-consumer-user
  main:
    # 允许定义相同的bean对象 去覆盖原有的
    allow-bean-definition-overriding: true
############zipkin相关###########
  zipkin:
    base-url: http://localhost:9411
  sleuth:
    sampler:
      # 采用率值介于：0到1，1表示全部采集，默认的采样比例为: 0.1(即10%)。
      probability: 1
############zipkin配置###########

#####################################################eureka相关###############################################################
eureka:
  client:
    service-url:
      # 指定当前Client所要连接的eureka Server
      defaultZone: http://localhost:8001/eureka
      registry-fetch-interval-seconds: 5 # 抓取服务列表
  instance:
    prefer-ip-address: true
    # instance-id: beter-spring-cloud-consumer-user
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}}
    # 设置当前Client每1秒向Server发送一次心跳，单位秒, 续约更新时间间隔（默认30秒）
    lease-renewal-interval-in-seconds: 5
    # 指定让Server认定当前Client已经失效的时间，将来可以从注册表中剔除了，单位秒,续约到期时间（默认90秒）
    lease-expiration-duration-in-seconds: 10

# 注册到eureka时，点进去的一些信息
info:
  version: beter-spring-cloud-consumer-user
  app.auth: beter
  app.name: zbt
  company.name: www.baidu.com
  company.addr: 浙江省杭州市
#####################################################eureka相关###############################################################


#####################################################feign相关###############################################################
# https://developer.51cto.com/article/709758.html
feign:
  client:
    httpclient: # 开启 HttpClient
      enabled: true
    config:
      default:
        connectTimeout: 5000   # 指定Feign客户端连接提供者的超时时限
        readTimeout: 5000      # 指定Feign客户端连接上提供者后，向提供者进行提交请求，从提交时刻开始，到接收到响应，这个时段的超时时限(发出到接收到信息的时间)
        loggerLevel: basic
  #请求和响应GZIP压缩支持
  compression:
    request:
      enabled: true
      #支持压缩的mime types
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

  # 开启Feign对Hystrix的支持
  hystrix:
    enabled: true
#####################################################feign相关###############################################################


#####################################################hystrix相关###############################################################
# 所有的HystrixCommand的请求超时时间,是全局的,不设置默认值为1000毫秒
# 类级别的和方法级别的服务降级都设置了，如果provider报错,返回类级别的降级信息(其他得另作讨论)
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 2000
#####################################################hystrix相关###############################################################


#####################################################ribbon相关###############################################################
#  #负载均衡超时时间配置，路由规则是注册中心ID生效，此处生效
#  #总的超时时间 = (1 + MaxAutoRetries + MaxAutoRetriesNextServer) * ReadTimeout
ribbon:
  ReadTimeout: 5000
  ConnectTimeout: 5000
# RandomRule    随机策略    随机选择 Server
# RoundRobinRule    轮训策略    按顺序循环选择 Server
# RetryRule    重试策略    在一个配置时问段内当选择 Server 不成功，则一直尝试选择一个可用的 Server
# BestAvailableRule    最低并发策略    逐个考察 Server，如果 Server 断路器打开，则忽略，再选择其中并发连接最低的 Server
# AvailabilityFilteringRule    可用过滤策略    过滤掉一直连接失败并被标记为 circuit tripped 的 Server，过滤掉那些高并发连接的 Server（active connections 超过配置的网值）
# ResponseTimeWeightedRule    响应时间加权策略    根据 Server 的响应时间分配权重。响应时间越长，权重越低，被选择到的概率就越低；响应时间越短，权重越高，被选择到的概率就越高。这个策略很贴切，综合了各种因素，如：网络、磁盘、IO等，这些因素直接影响着响应时间
# ZoneAvoidanceRule    区域权衡策略    综合判断 Server 所在区域的性能和 Server 的可用性轮询选择 Server，并且判定一个 AWS Zone 的运行性能是否可用，剔除不可用的 Zone 中的所有 Server
# 修改负载均衡策略为：随机策略,可以根据不同的微服务名称指定不同的负载均衡策略【配置文件的负载均衡策略】
# [beter-spring-cloud-producer-user,beter-spring-cloud-producer-order]为服务提供者服务名
beter-spring-cloud-producer-user:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
beter-spring-cloud-producer-order:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
#####################################################ribbon相关###############################################################


# 调用http://localhost:port/actuator/service-registry  下线参数{"status":"DOWN"}  上线参数{"status":"UP"}
management:
  endpoints:
    web:
      exposure:
        include: health,info,env,hystrix.stream,service-registry
  # 开启shutdown监控终端
  endpoint:
    shutdown:
      enabled: true